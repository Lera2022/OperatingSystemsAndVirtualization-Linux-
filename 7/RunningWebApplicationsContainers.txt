systemctl stop nginx
systemctl stop apache2
apt install docker.io docker-compose
docker
docker ps
docker ps -a
docker -info
docker run hello-world
docker ps -a
https://hub.docker.com/search?q=
docker search nginx
docker pull nginx
ss -ntlp
docker ps -a
docker ps
docker run -d --restart always --name nginx1 -p 80:80 -v /var/www/html:/usr/share/nginx/html nginx
docker images
docker ps
docker ps -a
docker exec -ti nginx1 bash
apt apdate
apt install mc
ss -ntlp
exit
ss -ntlp
docker stop 77d52e89ff50
docker ps -a
docker ps
docker start nginx1
docker ps -a
docker ps
docker restart nginx1
docker stop 77d52e89ff50
docker restart nginx1
docker images
docker rmi nginx
iptables -L -nv
apt install yamllint




cd /home/lk
mkdir wordpress && cd wordpress
mkdir nginx-conf
nano nginx-conf/nginx.conf

server {
        listen 80;
        listen [::]:80;

        server_name example.com www.example.com;

        index index.php index.html index.htm;

        root /var/www/html;

        location ~ /.well-known/acme-challenge {
                allow all;
                root /var/www/html;
        }

        location / {
                try_files $uri $uri/ /index.php$is_args$args;
        }

        location ~ \.php$ {
                try_files $uri =404;
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                fastcgi_pass wordpress:9000;
                fastcgi_index index.php;
                include fastcgi_params;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_param PATH_INFO $fastcgi_path_info;
        }

        location ~ /\.ht {
                deny all;
        }

        location = /favicon.ico {
                log_not_found off; access_log off;
        }
        location = /robots.txt {
                log_not_found off; access_log off; allow all;
        }
        location ~* \.(css|gif|ico|jpeg|jpg|js|png)$ {
                expires max;
                log_not_found off;
        }
}

nano .env
MYSQL_ROOT_PASSWORD=your_root_password
MYSQL_USER=your_wordpress_database_user
MYSQL_PASSWORD=your_wordpress_database_password

nano .dockerignore
.env
docker-compose.yml
.dockerignore

nano docker-compose.yml
version: '3'

services:
  db:
    image: mysql:8.0
    container_name: db
    restart: unless-stopped
    env_file: .env
    environment:
      - MYSQL_DATABASE=wordpress
    volumes:
      - dbdata:/var/lib/mysql
    command: '--default-authentication-plugin=mysql_native_password'
    networks:
      - app-network

  wordpress:
    depends_on:
      - db
    image: wordpress:5.1.1-fpm-alpine
    container_name: wordpress
    restart: unless-stopped
    env_file: .env
    environment:
      - WORDPRESS_DB_HOST=db:3306
      - WORDPRESS_DB_USER=$MYSQL_USER
      - WORDPRESS_DB_PASSWORD=$MYSQL_PASSWORD
      - WORDPRESS_DB_NAME=wordpress
    volumes:
      - wordpress:/var/www/html
    networks:
      - app-network

  webserver:
    depends_on:
      - wordpress
    image: nginx:1.15.12-alpine
    container_name: webserver
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - wordpress:/var/www/html
      - ./nginx-conf:/etc/nginx/conf.d
      - certbot-etc:/etc/letsencrypt
    networks:
      - app-network

volumes:
  certbot-etc:
  wordpress:
  dbdata:

networks:
  app-network:
    driver: bridge  

yamllint docker-compose.yml
docker-compose up -d

docker-compose ps
docker-compose images
docker volume ls
docker-compose logs webserver
docker volume ls
ip -c a
docker compose rm -fsv
docker-compose ps -a
docker-compose ps
docker ps -a
docker ps
docker volume ls
docker volume rm wordpress_certbot-etc
docker volume ls
docker volume rm wordpress_dbdata
docker volume rm wordpress_wordpress
docker volume ls
docker images
docker rmi mysql:8.0 wordpress:6.0.1-php8.0-fpm-alpine \
nginx:1.22.0-alpine
docker rmi {IMAGE ID}
docker system prune -a
ip -c a
docker network ls
